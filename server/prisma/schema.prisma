// Datasource & Generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  username         String           @unique
  passwordHash     String
  name             String
  avatarUrl        String?
  publicKey        String?
  pushSubscription Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  messages         Message[]
  participants     Participant[]
  messageStatuses  MessageStatus[]
  refreshTokens    RefreshToken[]
  reactions        MessageReaction[]

  @@index([email])
  @@index([username])
  @@index([createdAt])
}


model Conversation {
  id            String         @id @default(cuid())
  isGroup       Boolean        @default(false)
  title         String?
  lastMessageAt DateTime?      @db.Timestamptz(6)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  participants  Participant[]
  messages      Message[]

  @@index([lastMessageAt])
  @@index([createdAt])
  @@index([isGroup])
}


model Participant {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadMsgId  String?
  role           String       @default("MEMBER") // "ADMIN" or "MEMBER"

  @@unique([userId, conversationId])
  @@index([conversationId])
  @@index([userId])
  @@index([joinedAt])
  @@index([lastReadMsgId])
}


model Message {
  id                  String          @id @default(cuid())
  conversation        Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId      String
  sender              User            @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId            String
  content             String?
  imageUrl            String?
  fileUrl             String?
  fileName            String?
  sessionId           String?         // References the session key set used for encryption
  encryptedSessionKey String?         // Encrypted session key for this specific message (for forward secrecy)
  createdAt           DateTime        @default(now())
  statuses            MessageStatus[]
  reactions           MessageReaction[]

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([sessionId])
  @@index([createdAt])
}


enum DeliveryStatus {
  SENT
  DELIVERED
  READ
}


model MessageStatus {
  id        String          @id @default(cuid())
  message   Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    DeliveryStatus  @default(SENT)
  updatedAt DateTime        @updatedAt

  @@unique([messageId, userId])
  @@index([userId])
  @@index([status])
  @@index([updatedAt])
}


model MessageReaction {
  id        String    @id @default(cuid())
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  emoji     String
  createdAt DateTime  @default(now())

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
  @@index([emoji])
  @@index([createdAt])
}


model RefreshToken {
  id           String   @id @default(cuid())
  jti          String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  revokedAt    DateTime?
  replacedById String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@index([userId])
  @@index([expiresAt])
  @@index([jti])
  @@index([revokedAt])
}


model SessionKey {
  id              String   @id @default(cuid())
  conversationId  String
  sessionId       String
  userId          String
  encryptedKey    String   // Session key encrypted with user's public key
  createdAt       DateTime @default(now())
  expiresAt       DateTime?

  @@index([conversationId])
  @@index([userId])
  @@index([sessionId])
}